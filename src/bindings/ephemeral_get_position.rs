pub use ephemeral_get_position::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod ephemeral_get_position {
    pub use super::super::shared_types::*;
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("npm"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                            "contract INonfungiblePositionManager",
                        ),),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("tokenId"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256"),),
                    },
                ],
            }),
            functions: ::core::convert::From::from([(
                ::std::borrow::ToOwned::to_owned("getPosition"),
                ::std::vec![::ethers::core::abi::ethabi::Function {
                    name: ::std::borrow::ToOwned::to_owned("getPosition"),
                    inputs: ::std::vec![
                        ::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned("npm"),
                            kind: ::ethers::core::abi::ethabi::ParamType::Address,
                            internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                "contract INonfungiblePositionManager",
                            ),),
                        },
                        ::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned("tokenId"),
                            kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                            internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256"),),
                        },
                    ],
                    outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("state"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![
                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                            ::ethers::core::abi::ethabi::ParamType::Address,
                            ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![
                                ::ethers::core::abi::ethabi::ParamType::Uint(96usize),
                                ::ethers::core::abi::ethabi::ParamType::Address,
                                ::ethers::core::abi::ethabi::ParamType::Address,
                                ::ethers::core::abi::ethabi::ParamType::Address,
                                ::ethers::core::abi::ethabi::ParamType::Uint(24usize),
                                ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(128usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(128usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(128usize),
                            ],),
                            ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![
                                ::ethers::core::abi::ethabi::ParamType::Uint(160usize),
                                ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(16usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(16usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(16usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                ::ethers::core::abi::ethabi::ParamType::Bool,
                            ],),
                            ::ethers::core::abi::ethabi::ParamType::Uint(128usize),
                            ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                            ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                        ],),
                        internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                            "struct PositionState"
                        ),),
                    },],
                    constant: ::core::option::Option::None,
                    state_mutability: ::ethers::core::abi::ethabi::StateMutability::Payable,
                },],
            )]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static EPHEMERALGETPOSITION_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R`@Qb\0\t\x078\x03\x80b\0\t\x07\x839\x81\x01`@\x81\x90Rb\0\0&\x91b\0\x06\xE3V[`\0b\0\x004\x83\x83b\0\0dV[\x90P`\0\x81`@Q` \x01b\0\0K\x91\x90b\0\x07\x1FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x80Q` \x82\x01\xFD[b\0\x014`@\x80Q`\xE0\x80\x82\x01\x83R`\0\x80\x83R` \x80\x84\x01\x82\x90R\x84Qa\x01\x80\x81\x01\x86R\x82\x81R\x90\x81\x01\x82\x90R\x80\x85\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R\x91\x82\x01\x81\x90Ra\x01\0\x82\x01\x81\x90Ra\x01 \x82\x01\x81\x90Ra\x01@\x82\x01\x81\x90Ra\x01`\x82\x01R\x90\x91\x82\x01\x90\x81R`@\x80Q`\xE0\x81\x01\x82R`\0\x80\x82R` \x82\x81\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01R\x91\x01\x90\x81R`\0` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[b\0\x01@\x83\x83b\0\x01vV[`\x01`\x01`\xA0\x1B\x03\x16` \x82\x01R`@\x81\x01Qb\0\x01b\x90\x84\x90\x84\x90b\0\x01\x95V[Pb\0\x01p\x83\x83\x83b\0\x01\xBBV[\x92\x91PPV[`\0\x80b\0\x01\x8D\x84c1\xA9\x10\x8F`\xE1\x1B\x85b\0\x03rV[\x94\x93PPPPV[c\x13?uq`\xE3\x1B`\0\x81\x81R`\x04\x84\x90R\x90a\x01\x80\x83`$\x84\x88Z\xFA\x95\x94PPPPPV[\x81\x81R`@\x81\x01Q`\0b\0\x02>b\0\x01\xD4\x86b\0\x03\xA1V[`@\x84\x01Q``\x85\x01Q`\x80\x86\x01Q`@\x80Q`\0\x94\x85R` \x93\x84R\x91\x81R``\x84 `\xFF`\xA0\x1B\x95\x90\x95\x17\x90\x93R\x92\x90R\x7F\xE3O\x19\x9B\x19\xB2\xB4\xF4\x7FhD&\x19\xD5UR}$Ox\xA3)~\xA8\x93%\xF8C\xF8{\x8BT\x81R`U`\x0B \x91\x90R`\x01`\x01`\xA0\x1B\x03\x16\x90V[\x90Pb\0\x02T`\x01`\x01`\xA0\x1B\x03\x82\x16b\0\x03\xBEV[`\x01`\x01`\x80\x1B\x03\x16`\x80\x84\x01R``\x83\x01Qb\0\x02t\x90\x82\x90b\0\x03\xD4V[`\xE0\x82\x01Q`\x01`\x01`\x80\x1B\x03\x16\x15b\0\x03&W`\0\x80b\0\x02\xAF\x83\x85`\xA0\x01Q\x86`\xC0\x01Q\x88``\x01Q` \x01Qb\0\x03\xFB` \x1B` \x1CV[\x91P\x91P`\0\x80b\0\x02\xD9\x86`\xE0\x01Q\x85\x85\x89a\x01\0\x01Q\x8Aa\x01 \x01Qb\0\x04\xE2` \x1B` \x1CV[\x91P\x91P\x81\x86a\x01@\x01\x81\x81Qb\0\x02\xF2\x91\x90b\0\x08\xD7V[`\x01`\x01`\x80\x1B\x03\x16\x90RPa\x01`\x86\x01\x80Q\x82\x91\x90b\0\x03\x15\x90\x83\x90b\0\x08\xD7V[`\x01`\x01`\x80\x1B\x03\x16\x90RPPPPP[`@\x82\x01Qb\0\x03?\x90`\x01`\x01`\xA0\x1B\x03\x16b\0\x05+V[`\xFF\x16`\xA0\x84\x01R``\x82\x01Qb\0\x03`\x90`\x01`\x01`\xA0\x1B\x03\x16b\0\x05+V[`\xFF\x16`\xC0\x90\x93\x01\x92\x90\x92RPPPPV[`\0\x82`\0R\x81`\x04R` `\0`$`\0\x87Z\xFAb\0\x03\x96W=`\0\x80>=`\0\xFD[PP`\0Q\x92\x91PPV[`\0\x80b\0\x03\xB7\x83c\xC4Z\x01U`\xE0\x1Bb\0\x05QV[\x93\x92PPPV[`\0\x80b\0\x03\xB7\x83c\r42\x81`\xE1\x1Bb\0\x05QV[c8P\xC7\xBD`\xE0\x1B`\0\x81\x81R`\xE0\x90\x83\x90`\x04\x90\x86Z\xFAb\0\x03\xF6W`\0\x80\xFD[PPPV[`\0\x80\x80b\0\x04\x14`\x01`\x01`\xA0\x1B\x03\x88\x16\x87b\0\x05vV[\x90P`\0b\0\x04-`\x01`\x01`\xA0\x1B\x03\x89\x16\x87b\0\x05vV[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15b\0\x04^W\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pb\0\x04\xD7V[\x85`\x02\x0B\x85`\x02\x0B\x12b\0\x04\x8CW\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pb\0\x04\xD7V[`@\x80\x82\x01Q\x90\x83\x01Qb\0\x04\xAA`\x01`\x01`\xA0\x1B\x03\x8B\x16b\0\x05\xDDV[\x03\x03\x93P\x80``\x01Q\x82``\x01Qb\0\x04\xD2\x8A`\x01`\x01`\xA0\x1B\x03\x16b\0\x05\xF2` \x1B` \x1CV[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80b\0\x05\x01`\x01`\x01`\x80\x1B\x03\x88\x16\x85\x88\x03`\x01`\x80\x1Bb\0\x06\x07V[\x91Pb\0\x05\x1F`\x01`\x01`\x80\x1B\x03\x88\x16\x84\x87\x03`\x01`\x80\x1Bb\0\x06\x07V[\x90P\x95P\x95\x93PPPPV[`\x12`\0\x90\x81Rc1<\xE5g`\xE0\x1B` \x81\x81R\x80`\x04\x81\x86Z\xFA`\x05\x1BQ\x93\x92PPPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAb\0\x05lW`\0\x80\xFD[PP`\0Q\x91\x90PV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81b\0\x05\xD5\x85c\xF3\r\xBA\x93`\xE0\x1B\x84\x84a\x01\0b\0\x06\x16V[PP\x92\x91PPV[`\0b\0\x01p\x82c\xF3\x05\x83\x99`\xE0\x1Bb\0\x05QV[`\0b\0\x01p\x82cF\x14\x13\x19`\xE0\x1Bb\0\x05QV[`\0b\0\x01\x8D\x84\x84\x84b\0\x068V[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAb\0\x061W`\0\x80\xFD[PPPPPV[`\0\x83\x83\x02`\0\x19\x84\x86\t\x81\x81\x10\x82\x01\x90\x03\x80b\0\x06pW\x83b\0\x06dWc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x82\x90\x04\x90Pb\0\x03\xB7V[\x80\x84\x11b\0\x06\x86Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x83\x85\x87\t`\0\x85\x81\x03\x86\x16\x95\x86\x90\x04\x95\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x03\x83\x02`\x02\x90\x81\x18\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x90\x91\x03\x02\x02\x90P\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15b\0\x06\xF7W`\0\x80\xFD[\x82Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x07\x0FW`\0\x80\xFD[` \x93\x90\x93\x01Q\x92\x94\x92\x93PPPV[\x81Q\x81R` \x80\x83\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x90\x82\x01R`@\x80\x83\x01Q\x80Qa\x03\0\x84\x01\x92b\0\x07Z\x91\x90\x85\x01\x90`\x01`\x01``\x1B\x03\x16\x90RV[` \x81\x01Q`\x01`\x01`\xA0\x1B\x03\x81\x16``\x85\x01RP`@\x81\x01Q`\x01`\x01`\xA0\x1B\x03\x81\x16`\x80\x85\x01RP``\x81\x01Q`\x01`\x01`\xA0\x1B\x03\x81\x16`\xA0\x85\x01RP`\x80\x81\x01Qb\xFF\xFF\xFF\x81\x16`\xC0\x85\x01RP`\xA0\x81\x01Qb\0\x07\xBF`\xE0\x85\x01\x82`\x02\x0B\x90RV[P`\xC0\x81\x01Qa\x01\0b\0\x07\xD7\x81\x86\x01\x83`\x02\x0B\x90RV[`\xE0\x83\x01Q\x91Pa\x01 b\0\x07\xF6\x81\x87\x01\x84`\x01`\x01`\x80\x1B\x03\x16\x90RV[\x90\x83\x01Qa\x01@\x86\x81\x01\x91\x90\x91R\x90\x83\x01Qa\x01`\x80\x87\x01\x91\x90\x91R\x90\x83\x01Q`\x01`\x01`\x80\x1B\x03\x90\x81\x16a\x01\x80\x87\x01R\x92\x01Q\x91\x82\x16a\x01\xA0\x85\x01RPP``\x83\x81\x01Q\x80Q`\x01`\x01`\xA0\x1B\x03\x16a\x01\xC0\x85\x01R` \x81\x01Q`\x02\x0Ba\x01\xE0\x85\x01R`@\x81\x01Qa\xFF\xFF\x90\x81\x16a\x02\0\x86\x01R\x91\x81\x01Q\x82\x16a\x02 \x85\x01R`\x80\x80\x82\x01Q\x90\x92\x16a\x02@\x85\x01R`\xA0\x80\x82\x01Q`\xFF\x90\x81\x16a\x02`\x87\x01R`\xC0\x92\x83\x01Q\x15\x15a\x02\x80\x87\x01R\x92\x86\x01Q`\x01`\x01`\x80\x1B\x03\x16a\x02\xA0\x86\x01R\x85\x01Q\x82\x16a\x02\xC0\x85\x01R\x84\x01Q\x90\x81\x16a\x02\xE0\x84\x01R[P\x92\x91PPV[`\x01`\x01`\x80\x1B\x03\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15b\0\x08\xD0WcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD\xFE";
    /// The bytecode of the contract.
    pub static EPHEMERALGETPOSITION_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R`\x046\x10a\0\x1EW`\x005`\xE0\x1C\x80c:\xDB\xB5\xAF\x14a\0#W[`\0\x80\xFD[a\x006a\x0016`\x04a\x08LV[a\0LV[`@Qa\0C\x91\x90a\x08\x91V[`@Q\x80\x91\x03\x90\xF3[a\x01\x1B`@\x80Q`\xE0\x80\x82\x01\x83R`\0\x80\x83R` \x80\x84\x01\x82\x90R\x84Qa\x01\x80\x81\x01\x86R\x82\x81R\x90\x81\x01\x82\x90R\x80\x85\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R\x91\x82\x01\x81\x90Ra\x01\0\x82\x01\x81\x90Ra\x01 \x82\x01\x81\x90Ra\x01@\x82\x01\x81\x90Ra\x01`\x82\x01R\x90\x91\x82\x01\x90\x81R`@\x80Q`\xE0\x81\x01\x82R`\0\x80\x82R` \x82\x81\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01R\x91\x01\x90\x81R`\0` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[a\x01%\x83\x83a\x01dV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x82\x01R`@\x81\x01Qa\x01R\x90\x84\x90\x84\x90a\x01\x9AV[Pa\x01^\x83\x83\x83a\x01\xD9V[\x92\x91PPV[`\0\x80a\x01\x92\x84\x7FcR!\x1E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85a\x03\xD8V[\x94\x93PPPPV[\x7F\x99\xFB\xAB\x88\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x81\x81R`\x04\x84\x90R\x90a\x01\x80\x83`$\x84\x88Z\xFA\x95\x94PPPPPV[\x81\x81R`@\x81\x01Q`\0a\x02wa\x01\xEF\x86a\x04\x06V[\x83`@\x01Q\x84``\x01Q\x85`\x80\x01Q`@\x80Q`\0\x94\x85R` \x93\x84R\x91\x81R``\x84 t\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x90\x95\x17\x90\x93R\x92\x90R\x7F\xE3O\x19\x9B\x19\xB2\xB4\xF4\x7FhD&\x19\xD5UR}$Ox\xA3)~\xA8\x93%\xF8C\xF8{\x8BT\x81R`U`\x0B \x91\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x90Pa\x02\x98\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x04:V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x84\x01R``\x83\x01Qa\x02\xBF\x90\x82\x90a\x04gV[`\xE0\x82\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x03wW`\0\x80a\x02\xFA\x83\x85`\xA0\x01Q\x86`\xC0\x01Q\x88``\x01Q` \x01Qa\x04\xA6V[\x91P\x91P`\0\x80a\x03\x1C\x86`\xE0\x01Q\x85\x85\x89a\x01\0\x01Q\x8Aa\x01 \x01Qa\x05\xAFV[\x91P\x91P\x81\x86a\x01@\x01\x81\x81Qa\x033\x91\x90a\n\xA7V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RPa\x01`\x86\x01\x80Q\x82\x91\x90a\x03]\x90\x83\x90a\n\xA7V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RPPPPP[a\x03\x9A\x82`@\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x06 V[`\xFF\x16`\xA0\x84\x01R``\x82\x01Qa\x03\xC6\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x06 V[`\xFF\x16`\xC0\x90\x93\x01\x92\x90\x92RPPPPV[`\0\x82`\0R\x81`\x04R` `\0`$`\0\x87Z\xFAa\x03\xFBW=`\0\x80>=`\0\xFD[PP`\0Q\x92\x91PPV[`\0\x80a\x043\x83\x7F\xC4Z\x01U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06_V[\x93\x92PPPV[`\0\x80a\x043\x83\x7F\x1Ahe\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06_V[\x7F8P\xC7\xBD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x81\x81R`\xE0\x90\x83\x90`\x04\x90\x86Z\xFAa\x04\xA1W`\0\x80\xFD[PPPV[`\0\x80\x80a\x04\xCAs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x87a\x06\x83V[\x90P`\0a\x04\xEEs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x87a\x06\x83V[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15a\x05\x1DW\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pa\x05\xA4V[\x85`\x02\x0B\x85`\x02\x0B\x12a\x05IW\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pa\x05\xA4V[\x80`@\x01Q\x82`@\x01Qa\x05r\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\x01V[\x03\x03\x93P\x80``\x01Q\x82``\x01Qa\x05\x9F\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07-V[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80a\x05\xE2o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x85\x88\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x07YV[\x91Pa\x06\x14o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x84\x87\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x07YV[\x90P\x95P\x95\x93PPPPV[`\x12`\0\x90\x81R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x81\x81R\x80`\x04\x81\x86Z\xFA`\x05\x1BQ\x93\x92PPPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAa\x06yW`\0\x80\xFD[PP`\0Q\x91\x90PV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81a\x06\xF9\x85\x7F\xF3\r\xBA\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x84a\x01\0a\x07fV[PP\x92\x91PPV[`\0a\x01^\x82\x7F\xF3\x05\x83\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06_V[`\0a\x01^\x82\x7FF\x14\x13\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06_V[`\0a\x01\x92\x84\x84\x84a\x07\x87V[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAa\x07\x80W`\0\x80\xFD[PPPPPV[`\0\x83\x83\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x86\t\x81\x81\x10\x82\x01\x90\x03\x80a\x07\xDAW\x83a\x07\xCFWc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x82\x90\x04\x90Pa\x043V[\x80\x84\x11a\x07\xEFWc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x83\x85\x87\t`\0\x85\x81\x03\x86\x16\x95\x86\x90\x04\x95\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x03\x83\x02`\x02\x90\x81\x18\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x90\x91\x03\x02\x02\x90P\x93\x92PPPV[`\0\x80`@\x83\x85\x03\x12\x15a\x08_W`\0\x80\xFD[\x825s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x08\x83W`\0\x80\xFD[\x94` \x93\x90\x93\x015\x93PPPV[`\0a\x03\0\x82\x01\x90P\x82Q\x82Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x84\x01Q\x16` \x83\x01R`@\x83\x01Qa\x08\xDE`@\x84\x01\x82Qk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[` \x81\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16``\x85\x01RP`@\x81\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16`\x80\x85\x01RP``\x81\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16`\xA0\x85\x01RP`\x80\x81\x01Qb\xFF\xFF\xFF\x81\x16`\xC0\x85\x01RP`\xA0\x81\x01Qa\ti`\xE0\x85\x01\x82`\x02\x0B\x90RV[P`\xC0\x81\x01Qa\x01\0a\t\x80\x81\x86\x01\x83`\x02\x0B\x90RV[`\xE0\x83\x01Q\x91Pa\x01 a\t\xA7\x81\x87\x01\x84o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[\x90\x83\x01Qa\x01@\x86\x81\x01\x91\x90\x91R\x90\x83\x01Qa\x01`\x80\x87\x01\x91\x90\x91R\x90\x83\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16a\x01\x80\x87\x01R\x92\x01Q\x91\x82\x16a\x01\xA0\x85\x01RPP``\x83\x81\x01Q\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x01\xC0\x85\x01R` \x81\x01Q`\x02\x0Ba\x01\xE0\x85\x01R`@\x81\x01Qa\xFF\xFF\x90\x81\x16a\x02\0\x86\x01R\x91\x81\x01Q\x82\x16a\x02 \x85\x01R`\x80\x80\x82\x01Q\x90\x92\x16a\x02@\x85\x01R`\xA0\x80\x82\x01Q`\xFF\x90\x81\x16a\x02`\x87\x01R`\xC0\x92\x83\x01Q\x15\x15a\x02\x80\x87\x01R\x92\x86\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x02\xA0\x86\x01R\x85\x01Q\x82\x16a\x02\xC0\x85\x01R\x84\x01Q\x90\x81\x16a\x02\xE0\x84\x01R[P\x92\x91PPV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a\n\xA0W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD\xFE\xA1dsolcC\0\x08\x16\0\n";
    /// The deployed bytecode of the contract.
    pub static EPHEMERALGETPOSITION_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct EphemeralGetPosition<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for EphemeralGetPosition<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for EphemeralGetPosition<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for EphemeralGetPosition<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for EphemeralGetPosition<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(EphemeralGetPosition))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> EphemeralGetPosition<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(address: T, client: ::std::sync::Arc<M>) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                EPHEMERALGETPOSITION_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                EPHEMERALGETPOSITION_ABI.clone(),
                EPHEMERALGETPOSITION_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `getPosition` (0x3adbb5af) function
        pub fn get_position(
            &self,
            npm: ::ethers::core::types::Address,
            token_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, PositionState> {
            self.0
                .method_hash([58, 219, 181, 175], (npm, token_id))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for EphemeralGetPosition<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `getPosition` function with signature `getPosition(address,uint256)` and selector `0x3adbb5af`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getPosition", abi = "getPosition(address,uint256)")]
    pub struct GetPositionCall {
        pub npm: ::ethers::core::types::Address,
        pub token_id: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `getPosition` function with signature `getPosition(address,uint256)` and selector `0x3adbb5af`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetPositionReturn {
        pub state: PositionState,
    }
}
