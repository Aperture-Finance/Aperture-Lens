pub use position_lens::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod position_lens {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("getFeesOwed"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("getFeesOwed"),
                        inputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("pool"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                    "V3PoolCallee"
                                ),),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("owner"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                    "address"
                                ),),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("tickLower"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("int24"),),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("tickUpper"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("int24"),),
                            },
                        ],
                        outputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("tokensOwed0"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(128usize,),
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                    "uint128"
                                ),),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("tokensOwed1"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(128usize,),
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                    "uint128"
                                ),),
                            },
                        ],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("getTotalAmounts"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("getTotalAmounts"),
                        inputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("pool"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                    "V3PoolCallee"
                                ),),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("owner"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                    "address"
                                ),),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("tickLower"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("int24"),),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("tickUpper"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("int24"),),
                            },
                        ],
                        outputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("amount0"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                    "uint256"
                                ),),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("amount1"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                    "uint256"
                                ),),
                            },
                        ],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                    },],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static POSITIONLENS_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\x0C\xB4\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80c\x95\xBAQ\xBD\x14a\0;W\x80c\xC6\xA66e\x14a\0hW[`\0\x80\xFD[a\0Na\0I6`\x04a\x0C\x15V[a\0\xA4V[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01[`@Q\x80\x91\x03\x90\xF3[a\0{a\0v6`\x04a\x0C\x15V[a\x01\xDAV[`@\x80Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16\x81R\x92\x90\x91\x16` \x83\x01R\x01a\0_V[`\0\x80`\0a\0\xFF`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RP`@\x81\x01Q`\x06R` \x81\x01Q`\x03RQ`\0R`\x1A`\x0C \x90V[\x90P`\0a\x01#s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x83a\x02\xD8V[\x90P`\0a\x01F\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x039V[P\x82Q\x90\x91Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x01\xCEWa\x01\x86\x81a\x01s\x89`\x02\x0Ba\x03tV[a\x01\x7F\x89`\x02\x0Ba\x03tV[\x85Qa\x06wV[\x90\x95P\x93P`\0\x80a\x01\x9A\x8B\x8B\x8B\x8Ba\x01\xDAV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x93P\x16\x90Pa\x01\xBD\x82\x88a\x0CmV[\x96Pa\x01\xC9\x81\x87a\x0CmV[\x95PPP[PPP\x94P\x94\x92PPPV[`\0\x80`\0a\x025`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RP`@\x81\x01Q`\x06R` \x81\x01Q`\x03RQ`\0R`\x1A`\x0C \x90V[\x90P`\0a\x02Ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x83a\x02\xD8V[\x90P`\0a\x02|\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x039V[\x83Q\x90\x92Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x90Pa\x01\xCEW`\0\x80a\x02\xA9\x8B\x8A\x8A\x86a\x07%V[\x91P\x91Pa\x02\xC6\x84`\0\x01Q\x83\x83\x87` \x01Q\x88`@\x01Qa\x08.V[\x90\x9C\x90\x9BP\x99PPPPPPPPPPV[`@\x80Q`\xA0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x91\x90\x91R\x80a\x032\x84\x7FQN\xA4\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\x84`\xA0a\x08\x9FV[P\x92\x91PPV[`\0\x80\x80\x80a\x03h\x85\x7F8P\xC7\xBD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x08\xC0V[\x90\x96\x90\x95P\x93PPPPV[`\0`\x02\x82\x90\x0B\x81\x81\x12\x82\x03\x80\x82\x01\x18b\r\x89\xE8\x81\x11\x15a\x03\xA7Wc\x08\xC3y\xA0`\0R` \x80Ra\x01T`AR`E`\x1C\xFD[\x7F\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x80`\x07\x83\x90\x1B\x16\x1Cp\x01\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x02\x82\x16\x15a\x04\x03Wo\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x02`\x80\x1C[`\x04\x82\x16\x15a\x04\"Wo\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x02`\x80\x1C[`\x08\x82\x16\x15a\x04AWo\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x02`\x80\x1C[`\x10\x82\x16\x15a\x04`Wo\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x02`\x80\x1C[` \x82\x16\x15a\x04\x7FWo\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x02`\x80\x1C[`@\x82\x16\x15a\x04\x9EWo\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x02`\x80\x1C[`\x80\x82\x16\x15a\x04\xBDWo\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x02`\x80\x1C[a\x01\0\x82\x16\x15a\x04\xDDWo\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x02`\x80\x1C[a\x02\0\x82\x16\x15a\x04\xFDWo\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x02`\x80\x1C[a\x04\0\x82\x16\x15a\x05\x1DWo\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x02`\x80\x1C[a\x08\0\x82\x16\x15a\x05=Wo\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x02`\x80\x1C[a\x10\0\x82\x16\x15a\x05]Wo\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x02`\x80\x1C[a \0\x82\x16\x15a\x05}Wo\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x02`\x80\x1C[a@\0\x82\x16\x15a\x05\x9DWop\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x02`\x80\x1C[a\x80\0\x82\x16\x15a\x05\xBDWo1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x02`\x80\x1C[b\x01\0\0\x82\x16\x15a\x05\xDEWo\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x02`\x80\x1C[b\x02\0\0\x82\x16\x15a\x05\xFEWn]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x02`\x80\x1C[b\x04\0\0\x82\x16\x15a\x06\x1DWm\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x02`\x80\x1C[b\x08\0\0\x82\x16\x15a\x06:Wk\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x02`\x80\x1C[`\0\x83\x13\x15a\x06fW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04[c\xFF\xFF\xFF\xFF\x01` \x1C\x94\x93PPPPV[\x82\x82\x10\x83\x83\x18\x02\x92\x83\x18\x92\x90\x91\x18\x90`\0\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16\x90\x87\x16\x11a\x06\xBBWa\x06\xB4\x85\x85\x85a\x08\xECV[\x91Pa\x07\x1CV[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x07\x0EWa\x06\xFA\x86\x85\x85a\x08\xECV[\x91Pa\x07\x07\x85\x87\x85a\tZV[\x90Pa\x07\x1CV[a\x07\x19\x85\x85\x85a\tZV[\x90P[\x94P\x94\x92PPPV[`\0\x80\x80a\x07Is\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x87a\t\xA2V[\x90P`\0a\x07ms\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x87a\t\xA2V[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15a\x07\x9CW\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pa\x08#V[\x85`\x02\x0B\x85`\x02\x0B\x12a\x07\xC8W\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pa\x08#V[\x80`@\x01Q\x82`@\x01Qa\x07\xF1\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\n V[\x03\x03\x93P\x80``\x01Q\x82``\x01Qa\x08\x1E\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\nRV[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80a\x08ao\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x85\x88\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n~V[\x91Pa\x08\x93o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x84\x87\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n~V[\x90P\x95P\x95\x93PPPPV[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAa\x08\xB9W`\0\x80\xFD[PPPPPV[`\0\x80\x82`\0R`@`\0`\x04`\0\x87Z\xFAa\x08\xDBW`\0\x80\xFD[`\0Q\x91P` Q\x90P\x92P\x92\x90PV[\x82\x82\x10\x83\x83\x18\x02\x92\x83\x18\x92\x90\x91\x18\x90`\0a\tPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16\x90a\tL\x90{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0``\x87\x90\x1B\x16\x90\x87\x16\x83\x81\x03\x90a\n~V[\x04\x90V[\x90P[\x93\x92PPPV[\x82\x82\x10\x83\x83\x18\x02\x92\x83\x18\x92\x90\x91\x18\x90`\0a\tPo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x87\x16\x90\x86\x16\x03a\n\x8BV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81a\n\x18\x85\x7F\xF3\r\xBA\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x84a\x01\0a\x08\x9FV[PP\x92\x91PPV[`\0a\nL\x82\x7F\xF3\x05\x83\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xF0V[\x92\x91PPV[`\0a\nL\x82\x7FF\x14\x13\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xF0V[`\0a\tP\x84\x84\x84a\x0B\x14V[`\0\x82\x82\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x85\t\x81\x81\x10\x82\x01\x90\x03l\x01\0\0\0\0\0\0\0\0\0\0\0\0\x81\x10a\n\xDDWc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x80`\xA0\x1B\x82``\x1C\x17\x92PPP\x92\x91PPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAa\x0B\nW`\0\x80\xFD[PP`\0Q\x91\x90PV[`\0\x83\x83\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x86\t\x81\x81\x10\x82\x01\x90\x03\x80a\x0BgW\x83a\x0B\\Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x82\x90\x04\x90Pa\tSV[\x80\x84\x11a\x0B|Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x83\x85\x87\t`\0\x85\x81\x03\x86\x16\x95\x86\x90\x04\x95\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x03\x83\x02`\x02\x90\x81\x18\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x90\x91\x03\x02\x02\x90P\x93\x92PPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0B\xFBW`\0\x80\xFD[PV[\x805`\x02\x81\x90\x0B\x81\x14a\x0C\x10W`\0\x80\xFD[\x91\x90PV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x0C+W`\0\x80\xFD[\x845a\x0C6\x81a\x0B\xD9V[\x93P` \x85\x015a\x0CF\x81a\x0B\xD9V[\x92Pa\x0CT`@\x86\x01a\x0B\xFEV[\x91Pa\x0Cb``\x86\x01a\x0B\xFEV[\x90P\x92\x95\x91\x94P\x92PV[\x80\x82\x01\x80\x82\x11\x15a\nLW\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD\xFE\xA1dsolcC\0\x08\x16\0\n";
    /// The bytecode of the contract.
    pub static POSITIONLENS_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80c\x95\xBAQ\xBD\x14a\0;W\x80c\xC6\xA66e\x14a\0hW[`\0\x80\xFD[a\0Na\0I6`\x04a\x0C\x15V[a\0\xA4V[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01[`@Q\x80\x91\x03\x90\xF3[a\0{a\0v6`\x04a\x0C\x15V[a\x01\xDAV[`@\x80Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x93\x84\x16\x81R\x92\x90\x91\x16` \x83\x01R\x01a\0_V[`\0\x80`\0a\0\xFF`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RP`@\x81\x01Q`\x06R` \x81\x01Q`\x03RQ`\0R`\x1A`\x0C \x90V[\x90P`\0a\x01#s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x83a\x02\xD8V[\x90P`\0a\x01F\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x039V[P\x82Q\x90\x91Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x01\xCEWa\x01\x86\x81a\x01s\x89`\x02\x0Ba\x03tV[a\x01\x7F\x89`\x02\x0Ba\x03tV[\x85Qa\x06wV[\x90\x95P\x93P`\0\x80a\x01\x9A\x8B\x8B\x8B\x8Ba\x01\xDAV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x93P\x16\x90Pa\x01\xBD\x82\x88a\x0CmV[\x96Pa\x01\xC9\x81\x87a\x0CmV[\x95PPP[PPP\x94P\x94\x92PPPV[`\0\x80`\0a\x025`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RP`@\x81\x01Q`\x06R` \x81\x01Q`\x03RQ`\0R`\x1A`\x0C \x90V[\x90P`\0a\x02Ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x83a\x02\xD8V[\x90P`\0a\x02|\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x039V[\x83Q\x90\x92Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15\x90Pa\x01\xCEW`\0\x80a\x02\xA9\x8B\x8A\x8A\x86a\x07%V[\x91P\x91Pa\x02\xC6\x84`\0\x01Q\x83\x83\x87` \x01Q\x88`@\x01Qa\x08.V[\x90\x9C\x90\x9BP\x99PPPPPPPPPPV[`@\x80Q`\xA0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x91\x90\x91R\x80a\x032\x84\x7FQN\xA4\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\x84`\xA0a\x08\x9FV[P\x92\x91PPV[`\0\x80\x80\x80a\x03h\x85\x7F8P\xC7\xBD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x08\xC0V[\x90\x96\x90\x95P\x93PPPPV[`\0`\x02\x82\x90\x0B\x81\x81\x12\x82\x03\x80\x82\x01\x18b\r\x89\xE8\x81\x11\x15a\x03\xA7Wc\x08\xC3y\xA0`\0R` \x80Ra\x01T`AR`E`\x1C\xFD[\x7F\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x80`\x07\x83\x90\x1B\x16\x1Cp\x01\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x02\x82\x16\x15a\x04\x03Wo\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x02`\x80\x1C[`\x04\x82\x16\x15a\x04\"Wo\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x02`\x80\x1C[`\x08\x82\x16\x15a\x04AWo\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x02`\x80\x1C[`\x10\x82\x16\x15a\x04`Wo\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x02`\x80\x1C[` \x82\x16\x15a\x04\x7FWo\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x02`\x80\x1C[`@\x82\x16\x15a\x04\x9EWo\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x02`\x80\x1C[`\x80\x82\x16\x15a\x04\xBDWo\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x02`\x80\x1C[a\x01\0\x82\x16\x15a\x04\xDDWo\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x02`\x80\x1C[a\x02\0\x82\x16\x15a\x04\xFDWo\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x02`\x80\x1C[a\x04\0\x82\x16\x15a\x05\x1DWo\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x02`\x80\x1C[a\x08\0\x82\x16\x15a\x05=Wo\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x02`\x80\x1C[a\x10\0\x82\x16\x15a\x05]Wo\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x02`\x80\x1C[a \0\x82\x16\x15a\x05}Wo\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x02`\x80\x1C[a@\0\x82\x16\x15a\x05\x9DWop\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x02`\x80\x1C[a\x80\0\x82\x16\x15a\x05\xBDWo1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x02`\x80\x1C[b\x01\0\0\x82\x16\x15a\x05\xDEWo\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x02`\x80\x1C[b\x02\0\0\x82\x16\x15a\x05\xFEWn]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x02`\x80\x1C[b\x04\0\0\x82\x16\x15a\x06\x1DWm\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x02`\x80\x1C[b\x08\0\0\x82\x16\x15a\x06:Wk\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x02`\x80\x1C[`\0\x83\x13\x15a\x06fW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x04[c\xFF\xFF\xFF\xFF\x01` \x1C\x94\x93PPPPV[\x82\x82\x10\x83\x83\x18\x02\x92\x83\x18\x92\x90\x91\x18\x90`\0\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16\x90\x87\x16\x11a\x06\xBBWa\x06\xB4\x85\x85\x85a\x08\xECV[\x91Pa\x07\x1CV[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x07\x0EWa\x06\xFA\x86\x85\x85a\x08\xECV[\x91Pa\x07\x07\x85\x87\x85a\tZV[\x90Pa\x07\x1CV[a\x07\x19\x85\x85\x85a\tZV[\x90P[\x94P\x94\x92PPPV[`\0\x80\x80a\x07Is\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x87a\t\xA2V[\x90P`\0a\x07ms\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x87a\t\xA2V[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15a\x07\x9CW\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pa\x08#V[\x85`\x02\x0B\x85`\x02\x0B\x12a\x07\xC8W\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pa\x08#V[\x80`@\x01Q\x82`@\x01Qa\x07\xF1\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\n V[\x03\x03\x93P\x80``\x01Q\x82``\x01Qa\x08\x1E\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\nRV[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80a\x08ao\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x85\x88\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n~V[\x91Pa\x08\x93o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x84\x87\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n~V[\x90P\x95P\x95\x93PPPPV[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAa\x08\xB9W`\0\x80\xFD[PPPPPV[`\0\x80\x82`\0R`@`\0`\x04`\0\x87Z\xFAa\x08\xDBW`\0\x80\xFD[`\0Q\x91P` Q\x90P\x92P\x92\x90PV[\x82\x82\x10\x83\x83\x18\x02\x92\x83\x18\x92\x90\x91\x18\x90`\0a\tPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16\x90a\tL\x90{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0``\x87\x90\x1B\x16\x90\x87\x16\x83\x81\x03\x90a\n~V[\x04\x90V[\x90P[\x93\x92PPPV[\x82\x82\x10\x83\x83\x18\x02\x92\x83\x18\x92\x90\x91\x18\x90`\0a\tPo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x87\x16\x90\x86\x16\x03a\n\x8BV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81a\n\x18\x85\x7F\xF3\r\xBA\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x84a\x01\0a\x08\x9FV[PP\x92\x91PPV[`\0a\nL\x82\x7F\xF3\x05\x83\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xF0V[\x92\x91PPV[`\0a\nL\x82\x7FF\x14\x13\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\n\xF0V[`\0a\tP\x84\x84\x84a\x0B\x14V[`\0\x82\x82\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x85\t\x81\x81\x10\x82\x01\x90\x03l\x01\0\0\0\0\0\0\0\0\0\0\0\0\x81\x10a\n\xDDWc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x80`\xA0\x1B\x82``\x1C\x17\x92PPP\x92\x91PPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAa\x0B\nW`\0\x80\xFD[PP`\0Q\x91\x90PV[`\0\x83\x83\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x86\t\x81\x81\x10\x82\x01\x90\x03\x80a\x0BgW\x83a\x0B\\Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x82\x90\x04\x90Pa\tSV[\x80\x84\x11a\x0B|Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x83\x85\x87\t`\0\x85\x81\x03\x86\x16\x95\x86\x90\x04\x95\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x03\x83\x02`\x02\x90\x81\x18\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x90\x91\x03\x02\x02\x90P\x93\x92PPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0B\xFBW`\0\x80\xFD[PV[\x805`\x02\x81\x90\x0B\x81\x14a\x0C\x10W`\0\x80\xFD[\x91\x90PV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15a\x0C+W`\0\x80\xFD[\x845a\x0C6\x81a\x0B\xD9V[\x93P` \x85\x015a\x0CF\x81a\x0B\xD9V[\x92Pa\x0CT`@\x86\x01a\x0B\xFEV[\x91Pa\x0Cb``\x86\x01a\x0B\xFEV[\x90P\x92\x95\x91\x94P\x92PV[\x80\x82\x01\x80\x82\x11\x15a\nLW\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD\xFE\xA1dsolcC\0\x08\x16\0\n";
    /// The deployed bytecode of the contract.
    pub static POSITIONLENS_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct PositionLens<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for PositionLens<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for PositionLens<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for PositionLens<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for PositionLens<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(PositionLens))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> PositionLens<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(address: T, client: ::std::sync::Arc<M>) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                POSITIONLENS_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                POSITIONLENS_ABI.clone(),
                POSITIONLENS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `getFeesOwed` (0xc6a63665) function
        pub fn get_fees_owed(
            &self,
            pool: ::ethers::core::types::Address,
            owner: ::ethers::core::types::Address,
            tick_lower: i32,
            tick_upper: i32,
        ) -> ::ethers::contract::builders::ContractCall<M, (u128, u128)> {
            self.0
                .method_hash([198, 166, 54, 101], (pool, owner, tick_lower, tick_upper))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getTotalAmounts` (0x95ba51bd) function
        pub fn get_total_amounts(
            &self,
            pool: ::ethers::core::types::Address,
            owner: ::ethers::core::types::Address,
            tick_lower: i32,
            tick_upper: i32,
        ) -> ::ethers::contract::builders::ContractCall<M, (::ethers::core::types::U256, ::ethers::core::types::U256)>
        {
            self.0
                .method_hash([149, 186, 81, 189], (pool, owner, tick_lower, tick_upper))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for PositionLens<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `getFeesOwed` function with signature `getFeesOwed(address,address,int24,int24)` and selector `0xc6a63665`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getFeesOwed", abi = "getFeesOwed(address,address,int24,int24)")]
    pub struct GetFeesOwedCall {
        pub pool: ::ethers::core::types::Address,
        pub owner: ::ethers::core::types::Address,
        pub tick_lower: i32,
        pub tick_upper: i32,
    }
    ///Container type for all input parameters for the `getTotalAmounts` function with signature `getTotalAmounts(address,address,int24,int24)` and selector `0x95ba51bd`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getTotalAmounts", abi = "getTotalAmounts(address,address,int24,int24)")]
    pub struct GetTotalAmountsCall {
        pub pool: ::ethers::core::types::Address,
        pub owner: ::ethers::core::types::Address,
        pub tick_lower: i32,
        pub tick_upper: i32,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone, ::ethers::contract::EthAbiType, serde::Serialize, serde::Deserialize, Debug, PartialEq, Eq, Hash,
    )]
    pub enum PositionLensCalls {
        GetFeesOwed(GetFeesOwedCall),
        GetTotalAmounts(GetTotalAmountsCall),
    }
    impl ::ethers::core::abi::AbiDecode for PositionLensCalls {
        fn decode(data: impl AsRef<[u8]>) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <GetFeesOwedCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::GetFeesOwed(decoded));
            }
            if let Ok(decoded) = <GetTotalAmountsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::GetTotalAmounts(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for PositionLensCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::GetFeesOwed(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetTotalAmounts(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for PositionLensCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::GetFeesOwed(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetTotalAmounts(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<GetFeesOwedCall> for PositionLensCalls {
        fn from(value: GetFeesOwedCall) -> Self {
            Self::GetFeesOwed(value)
        }
    }
    impl ::core::convert::From<GetTotalAmountsCall> for PositionLensCalls {
        fn from(value: GetTotalAmountsCall) -> Self {
            Self::GetTotalAmounts(value)
        }
    }
    ///Container type for all return fields from the `getFeesOwed` function with signature `getFeesOwed(address,address,int24,int24)` and selector `0xc6a63665`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetFeesOwedReturn {
        pub tokens_owed_0: u128,
        pub tokens_owed_1: u128,
    }
    ///Container type for all return fields from the `getTotalAmounts` function with signature `getTotalAmounts(address,address,int24,int24)` and selector `0x95ba51bd`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetTotalAmountsReturn {
        pub amount_0: ::ethers::core::types::U256,
        pub amount_1: ::ethers::core::types::U256,
    }
}
