pub use ephemeral_get_positions::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod ephemeral_get_positions {
    pub use super::super::shared_types::*;
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("npm"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                            "contract INonfungiblePositionManager",
                        ),),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("tokenIds"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Array(::std::boxed::Box::new(
                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                        ),),
                        internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256[]"),),
                    },
                ],
            }),
            functions: ::core::convert::From::from([(
                ::std::borrow::ToOwned::to_owned("getPositions"),
                ::std::vec![::ethers::core::abi::ethabi::Function {
                    name: ::std::borrow::ToOwned::to_owned("getPositions"),
                    inputs: ::std::vec![
                        ::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned("npm"),
                            kind: ::ethers::core::abi::ethabi::ParamType::Address,
                            internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                                "contract INonfungiblePositionManager",
                            ),),
                        },
                        ::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned("tokenIds"),
                            kind: ::ethers::core::abi::ethabi::ParamType::Array(::std::boxed::Box::new(
                                ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                            ),),
                            internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned("uint256[]"),),
                        },
                    ],
                    outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("positions"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Array(::std::boxed::Box::new(
                            ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![
                                ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                ::ethers::core::abi::ethabi::ParamType::Address,
                                ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![
                                    ::ethers::core::abi::ethabi::ParamType::Uint(96usize),
                                    ::ethers::core::abi::ethabi::ParamType::Address,
                                    ::ethers::core::abi::ethabi::ParamType::Address,
                                    ::ethers::core::abi::ethabi::ParamType::Address,
                                    ::ethers::core::abi::ethabi::ParamType::Uint(24usize),
                                    ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                    ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(128usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(128usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(128usize),
                                ],),
                                ::ethers::core::abi::ethabi::ParamType::Tuple(::std::vec![
                                    ::ethers::core::abi::ethabi::ParamType::Uint(160usize),
                                    ::ethers::core::abi::ethabi::ParamType::Int(24usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(16usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(16usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(16usize),
                                    ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                    ::ethers::core::abi::ethabi::ParamType::Bool,
                                ],),
                                ::ethers::core::abi::ethabi::ParamType::Uint(128usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                            ],),
                        ),),
                        internal_type: ::core::option::Option::Some(::std::borrow::ToOwned::to_owned(
                            "struct PositionState[]"
                        ),),
                    },],
                    constant: ::core::option::Option::None,
                    state_mutability: ::ethers::core::abi::ethabi::StateMutability::Payable,
                },],
            )]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static EPHEMERALGETPOSITIONS_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R`@Qb\0\n\xF48\x03\x80b\0\n\xF4\x839\x81\x01`@\x81\x90Rb\0\0&\x91b\0\x07\xC1V[`\0b\0\x004\x83\x83b\0\0dV[\x90P`\0\x81`@Q` \x01b\0\0K\x91\x90b\0\x08\xAEV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x80Q` \x82\x01\xFD[\x80Q``\x90\x80`\x01`\x01`@\x1B\x03\x81\x11\x15b\0\0\x84Wb\0\0\x84b\0\x07\xABV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15b\0\x01\x87W\x81` \x01[b\0\x01s`@\x80Q`\xE0\x80\x82\x01\x83R`\0\x80\x83R` \x80\x84\x01\x82\x90R\x84Qa\x01\x80\x81\x01\x86R\x82\x81R\x90\x81\x01\x82\x90R\x80\x85\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R\x91\x82\x01\x81\x90Ra\x01\0\x82\x01\x81\x90Ra\x01 \x82\x01\x81\x90Ra\x01@\x82\x01\x81\x90Ra\x01`\x82\x01R\x90\x91\x82\x01\x90\x81R`@\x80Q`\xE0\x81\x01\x82R`\0\x80\x82R` \x82\x81\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01R\x91\x01\x90\x81R`\0` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[\x81R` \x01\x90`\x01\x90\x03\x90\x81b\0\0\xA3W\x90P[P\x91P`\0\x80[\x82\x81\x10\x15b\0\x02.W`\0\x85\x82\x81Q\x81\x10b\0\x01\xAEWb\0\x01\xAEb\0\n\xA7V[` \x02` \x01\x01Q\x90P`\0\x85\x84\x81Q\x81\x10b\0\x01\xCFWb\0\x01\xCFb\0\n\xA7V[` \x02` \x01\x01Q\x90Pb\0\x01\xF0\x88\x83\x83`@\x01Qb\0\x028` \x1B` \x1CV[\x15b\0\x02#W`\x01\x90\x93\x01\x92b\0\x02\x08\x88\x83b\0\x02^V[`\x01`\x01`\xA0\x1B\x03\x16` \x82\x01Rb\0\x02#\x88\x83\x83b\0\x02}V[PP`\x01\x01b\0\x01\x8EV[P\x82RP\x92\x91PPV[c\x13?uq`\xE3\x1B`\0\x81\x81R`\x04\x84\x90R\x90a\x01\x80\x83`$\x84\x88Z\xFA\x95\x94PPPPPV[`\0\x80b\0\x02u\x84c1\xA9\x10\x8F`\xE1\x1B\x85b\0\x044V[\x94\x93PPPPV[\x81\x81R`@\x81\x01Q`\0b\0\x03\0b\0\x02\x96\x86b\0\x04cV[`@\x84\x01Q``\x85\x01Q`\x80\x86\x01Q`@\x80Q`\0\x94\x85R` \x93\x84R\x91\x81R``\x84 `\xFF`\xA0\x1B\x95\x90\x95\x17\x90\x93R\x92\x90R\x7F\xE3O\x19\x9B\x19\xB2\xB4\xF4\x7FhD&\x19\xD5UR}$Ox\xA3)~\xA8\x93%\xF8C\xF8{\x8BT\x81R`U`\x0B \x91\x90R`\x01`\x01`\xA0\x1B\x03\x16\x90V[\x90Pb\0\x03\x16`\x01`\x01`\xA0\x1B\x03\x82\x16b\0\x04\x80V[`\x01`\x01`\x80\x1B\x03\x16`\x80\x84\x01R``\x83\x01Qb\0\x036\x90\x82\x90b\0\x04\x96V[`\xE0\x82\x01Q`\x01`\x01`\x80\x1B\x03\x16\x15b\0\x03\xE8W`\0\x80b\0\x03q\x83\x85`\xA0\x01Q\x86`\xC0\x01Q\x88``\x01Q` \x01Qb\0\x04\xBD` \x1B` \x1CV[\x91P\x91P`\0\x80b\0\x03\x9B\x86`\xE0\x01Q\x85\x85\x89a\x01\0\x01Q\x8Aa\x01 \x01Qb\0\x05\xA4` \x1B` \x1CV[\x91P\x91P\x81\x86a\x01@\x01\x81\x81Qb\0\x03\xB4\x91\x90b\0\n\xBDV[`\x01`\x01`\x80\x1B\x03\x16\x90RPa\x01`\x86\x01\x80Q\x82\x91\x90b\0\x03\xD7\x90\x83\x90b\0\n\xBDV[`\x01`\x01`\x80\x1B\x03\x16\x90RPPPPP[`@\x82\x01Qb\0\x04\x01\x90`\x01`\x01`\xA0\x1B\x03\x16b\0\x05\xEDV[`\xFF\x16`\xA0\x84\x01R``\x82\x01Qb\0\x04\"\x90`\x01`\x01`\xA0\x1B\x03\x16b\0\x05\xEDV[`\xFF\x16`\xC0\x90\x93\x01\x92\x90\x92RPPPPV[`\0\x82`\0R\x81`\x04R` `\0`$`\0\x87Z\xFAb\0\x04XW=`\0\x80>=`\0\xFD[PP`\0Q\x92\x91PPV[`\0\x80b\0\x04y\x83c\xC4Z\x01U`\xE0\x1Bb\0\x06\x13V[\x93\x92PPPV[`\0\x80b\0\x04y\x83c\r42\x81`\xE1\x1Bb\0\x06\x13V[c8P\xC7\xBD`\xE0\x1B`\0\x81\x81R`\xE0\x90\x83\x90`\x04\x90\x86Z\xFAb\0\x04\xB8W`\0\x80\xFD[PPPV[`\0\x80\x80b\0\x04\xD6`\x01`\x01`\xA0\x1B\x03\x88\x16\x87b\0\x068V[\x90P`\0b\0\x04\xEF`\x01`\x01`\xA0\x1B\x03\x89\x16\x87b\0\x068V[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15b\0\x05 W\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pb\0\x05\x99V[\x85`\x02\x0B\x85`\x02\x0B\x12b\0\x05NW\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pb\0\x05\x99V[`@\x80\x82\x01Q\x90\x83\x01Qb\0\x05l`\x01`\x01`\xA0\x1B\x03\x8B\x16b\0\x06\x9FV[\x03\x03\x93P\x80``\x01Q\x82``\x01Qb\0\x05\x94\x8A`\x01`\x01`\xA0\x1B\x03\x16b\0\x06\xBA` \x1B` \x1CV[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80b\0\x05\xC3`\x01`\x01`\x80\x1B\x03\x88\x16\x85\x88\x03`\x01`\x80\x1Bb\0\x06\xCFV[\x91Pb\0\x05\xE1`\x01`\x01`\x80\x1B\x03\x88\x16\x84\x87\x03`\x01`\x80\x1Bb\0\x06\xCFV[\x90P\x95P\x95\x93PPPPV[`\x12`\0\x90\x81Rc1<\xE5g`\xE0\x1B` \x81\x81R\x80`\x04\x81\x86Z\xFA`\x05\x1BQ\x93\x92PPPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAb\0\x06.W`\0\x80\xFD[PP`\0Q\x91\x90PV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81b\0\x06\x97\x85c\xF3\r\xBA\x93`\xE0\x1B\x84\x84a\x01\0b\0\x06\xDEV[PP\x92\x91PPV[`\0b\0\x06\xB4\x82c\xF3\x05\x83\x99`\xE0\x1Bb\0\x06\x13V[\x92\x91PPV[`\0b\0\x06\xB4\x82cF\x14\x13\x19`\xE0\x1Bb\0\x06\x13V[`\0b\0\x02u\x84\x84\x84b\0\x07\0V[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAb\0\x06\xF9W`\0\x80\xFD[PPPPPV[`\0\x83\x83\x02`\0\x19\x84\x86\t\x81\x81\x10\x82\x01\x90\x03\x80b\0\x078W\x83b\0\x07,Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x82\x90\x04\x90Pb\0\x04yV[\x80\x84\x11b\0\x07NWc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x83\x85\x87\t`\0\x85\x81\x03\x86\x16\x95\x86\x90\x04\x95\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x03\x83\x02`\x02\x90\x81\x18\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x90\x91\x03\x02\x02\x90P\x93\x92PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0\x80`@\x83\x85\x03\x12\x15b\0\x07\xD5W`\0\x80\xFD[\x82Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\x07\xEDW`\0\x80\xFD[` \x84\x81\x01Q\x91\x93P\x90`\x01`\x01`@\x1B\x03\x80\x82\x11\x15b\0\x08\rW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12b\0\x08\"W`\0\x80\xFD[\x81Q\x81\x81\x11\x15b\0\x087Wb\0\x087b\0\x07\xABV[\x80`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x85\x82\x11\x17\x15b\0\x08_Wb\0\x08_b\0\x07\xABV[`@R\x91\x82R\x84\x82\x01\x92P\x83\x81\x01\x85\x01\x91\x89\x83\x11\x15b\0\x08~W`\0\x80\xFD[\x93\x85\x01\x93[\x82\x85\x10\x15b\0\x08\x9EW\x84Q\x84R\x93\x85\x01\x93\x92\x85\x01\x92b\0\x08\x83V[\x80\x96PPPPPPP\x92P\x92\x90PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R`\0\x91\x90`@\x90\x81\x85\x01\x90\x86\x84\x01\x85[\x82\x81\x10\x15b\0\n\x9AW\x81Q\x80Q\x85R\x86\x81\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x87\x86\x01R\x85\x81\x01Q\x80Q`\x01`\x01``\x1B\x03\x16\x87\x87\x01R\x87\x81\x01Q``b\0\t\x19\x81\x89\x01\x83`\x01`\x01`\xA0\x1B\x03\x16\x90RV[\x88\x83\x01Q\x91P`\x80b\0\t6\x81\x8A\x01\x84`\x01`\x01`\xA0\x1B\x03\x16\x90RV[\x81\x84\x01Q\x92P`\xA0b\0\tS\x81\x8B\x01\x85`\x01`\x01`\xA0\x1B\x03\x16\x90RV[\x81\x85\x01Q\x93P`\xC0b\0\tl\x81\x8C\x01\x86b\xFF\xFF\xFF\x16\x90RV[\x81\x86\x01Q\x94P`\xE0b\0\t\x83\x81\x8D\x01\x87`\x02\x0B\x90RV[\x81\x87\x01Q\x95Pa\x01\0b\0\t\x9B\x81\x8E\x01\x88`\x02\x0B\x90RV[\x90\x87\x01Q\x95Pa\x01 \x90b\0\t\xBA\x8D\x83\x01\x88`\x01`\x01`\x80\x1B\x03\x16\x90RV[\x87\x01Qa\x01@\x8D\x81\x01\x91\x90\x91R\x90\x87\x01Qa\x01`\x80\x8E\x01\x91\x90\x91R\x90\x87\x01Q`\x01`\x01`\x80\x1B\x03\x90\x81\x16a\x01\x80\x8E\x01R\x96\x01Q\x86\x16a\x01\xA0\x8C\x01R\x92\x86\x01Q\x80Q`\x01`\x01`\xA0\x1B\x03\x16a\x01\xC0\x8C\x01R` \x81\x01Q`\x02\x0Ba\x01\xE0\x8C\x01R`@\x81\x01Qa\xFF\xFF\x90\x81\x16a\x02\0\x8D\x01R``\x82\x01Q\x81\x16a\x02 \x8D\x01R`\x80\x82\x01Q\x16a\x02@\x8C\x01R`\xA0\x81\x01Q`\xFF\x90\x81\x16a\x02`\x8D\x01R`\xC0\x90\x91\x01Q\x15\x15a\x02\x80\x8C\x01R\x91\x86\x01Q\x90\x94\x16a\x02\xA0\x8A\x01R\x92\x84\x01Q\x83\x16a\x02\xC0\x89\x01R\x92\x90\x92\x01Q\x16a\x02\xE0\x86\x01RPa\x03\0\x90\x93\x01\x92\x90\x85\x01\x90`\x01\x01b\0\x08\xCBV[P\x91\x97\x96PPPPPPPV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\x01`\x01`\x80\x1B\x03\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15b\0\n\xECWcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P\x92\x91PPV\xFE";
    /// The bytecode of the contract.
    pub static EPHEMERALGETPOSITIONS_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R`\x046\x10a\0\x1EW`\x005`\xE0\x1C\x80c\xA3?\x97\xFE\x14a\0#W[`\0\x80\xFD[a\x006a\x0016`\x04a\t0V[a\0LV[`@Qa\0C\x91\x90a\n:V[`@Q\x80\x91\x03\x90\xF3[\x80Q``\x90\x80g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0jWa\0ja\t\x01V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01jW\x81` \x01[a\x01W`@\x80Q`\xE0\x80\x82\x01\x83R`\0\x80\x83R` \x80\x84\x01\x82\x90R\x84Qa\x01\x80\x81\x01\x86R\x82\x81R\x90\x81\x01\x82\x90R\x80\x85\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R\x91\x82\x01\x81\x90Ra\x01\0\x82\x01\x81\x90Ra\x01 \x82\x01\x81\x90Ra\x01@\x82\x01\x81\x90Ra\x01`\x82\x01R\x90\x91\x82\x01\x90\x81R`@\x80Q`\xE0\x81\x01\x82R`\0\x80\x82R` \x82\x81\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01R\x91\x01\x90\x81R`\0` \x82\x01\x81\x90R`@\x82\x01\x81\x90R``\x90\x91\x01R\x90V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0\x88W\x90P[P\x91P`\0\x80[\x82\x81\x10\x15a\x02\tW`\0\x85\x82\x81Q\x81\x10a\x01\x8DWa\x01\x8Da\x0C\x82V[` \x02` \x01\x01Q\x90P`\0\x85\x84\x81Q\x81\x10a\x01\xABWa\x01\xABa\x0C\x82V[` \x02` \x01\x01Q\x90Pa\x01\xC4\x88\x83\x83`@\x01Qa\x02\x13V[\x15a\x01\xFFW\x83`\x01\x01\x93Pa\x01\xD9\x88\x83a\x02RV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x82\x01Ra\x01\xFF\x88\x83\x83a\x02\x88V[PP`\x01\x01a\x01qV[P\x82RP\x92\x91PPV[\x7F\x99\xFB\xAB\x88\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x81\x81R`\x04\x84\x90R\x90a\x01\x80\x83`$\x84\x88Z\xFA\x95\x94PPPPPV[`\0\x80a\x02\x80\x84\x7FcR!\x1E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85a\x04\x87V[\x94\x93PPPPV[\x81\x81R`@\x81\x01Q`\0a\x03&a\x02\x9E\x86a\x04\xB5V[\x83`@\x01Q\x84``\x01Q\x85`\x80\x01Q`@\x80Q`\0\x94\x85R` \x93\x84R\x91\x81R``\x84 t\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x90\x95\x17\x90\x93R\x92\x90R\x7F\xE3O\x19\x9B\x19\xB2\xB4\xF4\x7FhD&\x19\xD5UR}$Ox\xA3)~\xA8\x93%\xF8C\xF8{\x8BT\x81R`U`\x0B \x91\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x90Pa\x03G\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x04\xE9V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x84\x01R``\x83\x01Qa\x03n\x90\x82\x90a\x05\x16V[`\xE0\x82\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x15a\x04&W`\0\x80a\x03\xA9\x83\x85`\xA0\x01Q\x86`\xC0\x01Q\x88``\x01Q` \x01Qa\x05UV[\x91P\x91P`\0\x80a\x03\xCB\x86`\xE0\x01Q\x85\x85\x89a\x01\0\x01Q\x8Aa\x01 \x01Qa\x06^V[\x91P\x91P\x81\x86a\x01@\x01\x81\x81Qa\x03\xE2\x91\x90a\x0C\xB1V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RPa\x01`\x86\x01\x80Q\x82\x91\x90a\x04\x0C\x90\x83\x90a\x0C\xB1V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RPPPPP[a\x04I\x82`@\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x06\xCFV[`\xFF\x16`\xA0\x84\x01R``\x82\x01Qa\x04u\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x06\xCFV[`\xFF\x16`\xC0\x90\x93\x01\x92\x90\x92RPPPPV[`\0\x82`\0R\x81`\x04R` `\0`$`\0\x87Z\xFAa\x04\xAAW=`\0\x80>=`\0\xFD[PP`\0Q\x92\x91PPV[`\0\x80a\x04\xE2\x83\x7F\xC4Z\x01U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x07\x0EV[\x93\x92PPPV[`\0\x80a\x04\xE2\x83\x7F\x1Ahe\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x07\x0EV[\x7F8P\xC7\xBD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x81\x81R`\xE0\x90\x83\x90`\x04\x90\x86Z\xFAa\x05PW`\0\x80\xFD[PPPV[`\0\x80\x80a\x05ys\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x87a\x072V[\x90P`\0a\x05\x9Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x89\x16\x87a\x072V[\x90P\x86`\x02\x0B\x85`\x02\x0B\x12\x15a\x05\xCCW\x80`@\x01Q\x82`@\x01Q\x03\x93P\x80``\x01Q\x82``\x01Q\x03\x92Pa\x06SV[\x85`\x02\x0B\x85`\x02\x0B\x12a\x05\xF8W\x81`@\x01Q\x81`@\x01Q\x03\x93P\x81``\x01Q\x81``\x01Q\x03\x92Pa\x06SV[\x80`@\x01Q\x82`@\x01Qa\x06!\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xB0V[\x03\x03\x93P\x80``\x01Q\x82``\x01Qa\x06N\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x07\xE2V[\x03\x03\x92P[PP\x94P\x94\x92PPPV[`\0\x80a\x06\x91o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x85\x88\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x08\x0EV[\x91Pa\x06\xC3o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x84\x87\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x08\x0EV[\x90P\x95P\x95\x93PPPPV[`\x12`\0\x90\x81R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x81\x81R\x80`\x04\x81\x86Z\xFA`\x05\x1BQ\x93\x92PPPV[`\0\x81`\0R` `\0`\x04`\0\x86Z\xFAa\x07(W`\0\x80\xFD[PP`\0Q\x91\x90PV[`@\x80Qa\x01\0\x81\x01\x82R`\0\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x91\x90\x91R`\x02\x82\x90\x0B\x81a\x07\xA8\x85\x7F\xF3\r\xBA\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x84a\x01\0a\x08\x1BV[PP\x92\x91PPV[`\0a\x07\xDC\x82\x7F\xF3\x05\x83\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x07\x0EV[\x92\x91PPV[`\0a\x07\xDC\x82\x7FF\x14\x13\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x07\x0EV[`\0a\x02\x80\x84\x84\x84a\x08<V[\x83`\0R\x82`\x04R\x80\x82`$`\0\x88Z\xFAa\x085W`\0\x80\xFD[PPPPPV[`\0\x83\x83\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x86\t\x81\x81\x10\x82\x01\x90\x03\x80a\x08\x8FW\x83a\x08\x84Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[P\x82\x90\x04\x90Pa\x04\xE2V[\x80\x84\x11a\x08\xA4Wc\xAEG\xF7\x02`\0R`\x04`\x1C\xFD[\x83\x85\x87\t`\0\x85\x81\x03\x86\x16\x95\x86\x90\x04\x95\x84\x83\x11\x90\x93\x03\x90\x83\x90\x03\x83\x90\x04`\x01\x01\x02\x92\x03\x04\x17`\x03\x83\x02`\x02\x90\x81\x18\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x82\x03\x02\x80\x85\x02\x90\x91\x03\x02\x02\x90P\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\tCW`\0\x80\xFD[\x825s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\tgW`\0\x80\xFD[\x91P` \x83\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\t\x85W`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\t\x99W`\0\x80\xFD[\x815\x81\x81\x11\x15a\t\xABWa\t\xABa\t\x01V[\x80`\x05\x1B`@Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`?\x83\x01\x16\x81\x01\x81\x81\x10\x85\x82\x11\x17\x15a\t\xEEWa\t\xEEa\t\x01V[`@R\x91\x82R\x84\x82\x01\x92P\x83\x81\x01\x85\x01\x91\x89\x83\x11\x15a\n\x0CW`\0\x80\xFD[\x93\x85\x01\x93[\x82\x85\x10\x15a\n*W\x845\x84R\x93\x85\x01\x93\x92\x85\x01\x92a\n\x11V[\x80\x96PPPPPPP\x92P\x92\x90PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R`\0\x91\x90`@\x90\x81\x85\x01\x90\x86\x84\x01\x85[\x82\x81\x10\x15a\x0CuW\x81Q\x80Q\x85R\x86\x81\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87\x86\x01R\x85\x81\x01Q\x80Qk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87\x87\x01R\x87\x81\x01Q``a\n\xC2\x81\x89\x01\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[\x88\x83\x01Q\x91P`\x80a\n\xEB\x81\x8A\x01\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[\x81\x84\x01Q\x92P`\xA0a\x0B\x14\x81\x8B\x01\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[\x81\x85\x01Q\x93P`\xC0a\x0B,\x81\x8C\x01\x86b\xFF\xFF\xFF\x16\x90RV[\x81\x86\x01Q\x94P`\xE0a\x0BB\x81\x8D\x01\x87`\x02\x0B\x90RV[\x81\x87\x01Q\x95Pa\x01\0a\x0BY\x81\x8E\x01\x88`\x02\x0B\x90RV[\x90\x87\x01Q\x95Pa\x01 \x90a\x0B\x80\x8D\x83\x01\x88o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90RV[\x87\x01Qa\x01@\x8D\x81\x01\x91\x90\x91R\x90\x87\x01Qa\x01`\x80\x8E\x01\x91\x90\x91R\x90\x87\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16a\x01\x80\x8E\x01R\x96\x01Q\x86\x16a\x01\xA0\x8C\x01R\x92\x86\x01Q\x80Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x01\xC0\x8C\x01R` \x81\x01Q`\x02\x0Ba\x01\xE0\x8C\x01R`@\x81\x01Qa\xFF\xFF\x90\x81\x16a\x02\0\x8D\x01R``\x82\x01Q\x81\x16a\x02 \x8D\x01R`\x80\x82\x01Q\x16a\x02@\x8C\x01R`\xA0\x81\x01Q`\xFF\x90\x81\x16a\x02`\x8D\x01R`\xC0\x90\x91\x01Q\x15\x15a\x02\x80\x8C\x01R\x91\x86\x01Q\x90\x94\x16a\x02\xA0\x8A\x01R\x92\x84\x01Q\x83\x16a\x02\xC0\x89\x01R\x92\x90\x92\x01Q\x16a\x02\xE0\x86\x01RPa\x03\0\x90\x93\x01\x92\x90\x85\x01\x90`\x01\x01a\nWV[P\x91\x97\x96PPPPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a\r\x01W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[P\x92\x91PPV\xFE\xA1dsolcC\0\x08\x16\0\n";
    /// The deployed bytecode of the contract.
    pub static EPHEMERALGETPOSITIONS_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct EphemeralGetPositions<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for EphemeralGetPositions<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for EphemeralGetPositions<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for EphemeralGetPositions<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for EphemeralGetPositions<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(EphemeralGetPositions))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> EphemeralGetPositions<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(address: T, client: ::std::sync::Arc<M>) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                EPHEMERALGETPOSITIONS_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                EPHEMERALGETPOSITIONS_ABI.clone(),
                EPHEMERALGETPOSITIONS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `getPositions` (0xa33f97fe) function
        pub fn get_positions(
            &self,
            npm: ::ethers::core::types::Address,
            token_ids: ::std::vec::Vec<::ethers::core::types::U256>,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::vec::Vec<PositionState>> {
            self.0
                .method_hash([163, 63, 151, 254], (npm, token_ids))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for EphemeralGetPositions<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `getPositions` function with signature `getPositions(address,uint256[])` and selector `0xa33f97fe`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getPositions", abi = "getPositions(address,uint256[])")]
    pub struct GetPositionsCall {
        pub npm: ::ethers::core::types::Address,
        pub token_ids: ::std::vec::Vec<::ethers::core::types::U256>,
    }
    ///Container type for all return fields from the `getPositions` function with signature `getPositions(address,uint256[])` and selector `0xa33f97fe`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetPositionsReturn {
        pub positions: ::std::vec::Vec<PositionState>,
    }
}
